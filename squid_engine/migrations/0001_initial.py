# Generated by Django 3.0.6 on 2021-10-20 11:15

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Gatekeeper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(default='Minor', max_length=50, verbose_name='Criticality Name')),
                ('Max_Allowed', models.PositiveSmallIntegerField(default=1, help_text='Maximum Number of Bugs allowed')),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(default='mule_app', max_length=200)),
                ('Path', models.CharField(default='src/main/resources', max_length=500)),
            ],
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(max_length=200, verbose_name='Rule Name')),
                ('Description', models.CharField(help_text='Proper Description of the Rule to be displayed in the result page', max_length=200, verbose_name='Rule Description')),
                ('Gatekeeper', models.ForeignKey(help_text='Criticality of Rule', on_delete=django.db.models.deletion.CASCADE, to='squid_engine.Gatekeeper')),
                ('Location', models.ForeignKey(help_text='Location Path of the Rule on which Rule condition will be scanned', on_delete=django.db.models.deletion.CASCADE, to='squid_engine.Location', verbose_name='Root Path')),
            ],
        ),
        migrations.CreateModel(
            name='Code_Rule',
            fields=[
                ('rule_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='squid_engine.Rule')),
                ('XPath_Condition', models.CharField(default='example: ** boolean(//following::comment()) **', max_length=200)),
                ('XPath_Comparator', models.CharField(choices=[('<', 'Less Than'), ('>', 'Greater Than'), ('=', 'Equals to'), ('!=', 'Not Equal to'), ('regex', 'Regex')], default='=', max_length=200)),
                ('XPath_Expected_Value', models.CharField(default='True', max_length=200)),
            ],
            bases=('squid_engine.rule',),
        ),
        migrations.CreateModel(
            name='Folder_Structure_Rule',
            fields=[
                ('rule_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='squid_engine.Rule')),
                ('Folder_Structure_Condition', models.CharField(choices=[('fileName', 'File Name'), ('directoryName', 'Folder Name')], default='fileName', max_length=200)),
                ('Folder_Structure_Comparator', models.CharField(choices=[('=', 'Equals to'), ('!=', 'Not Equal to'), ('endsWith', 'Ends With'), ('startsWith', 'Starts With'), ('contains', 'Contains '), ('notContains', 'Does not Contain')], default='=', max_length=200)),
                ('Folder_Structure_Expected_Value', models.CharField(default='global.xml', max_length=200)),
            ],
            bases=('squid_engine.rule',),
        ),
        migrations.CreateModel(
            name='Platform_Rule',
            fields=[
                ('rule_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='squid_engine.Rule')),
                ('Platform_Condition', models.CharField(default='example: ** boolean(//following::comment()) ** ', max_length=200)),
                ('Platform_Comparator', models.CharField(choices=[('<', 'Less Than'), ('>', 'Greater Than'), ('=', 'Equals to'), ('!=', 'Not Equal to'), ('regex', 'Regex')], default='=', max_length=200)),
                ('Platform_Expected_Value', models.CharField(default='True', max_length=200)),
            ],
            bases=('squid_engine.rule',),
        ),
        migrations.CreateModel(
            name='Raml_Rule',
            fields=[
                ('rule_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='squid_engine.Rule')),
                ('Raml_Condition', models.CharField(default='example: ** boolean(//following::comment()) ** ', max_length=200)),
                ('Raml_Comparator', models.CharField(choices=[('<', 'Less Than'), ('>', 'Greater Than'), ('=', 'Equals to'), ('!=', 'Not Equal to'), ('regex', 'Regex')], default='=', max_length=200)),
                ('Raml_Expected_Value', models.CharField(default='True', max_length=200)),
            ],
            bases=('squid_engine.rule',),
        ),
        migrations.CreateModel(
            name='Security_Rule',
            fields=[
                ('rule_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='squid_engine.Rule')),
                ('Security_Condition', models.CharField(default='example: ** boolean(//following::comment()) ** ', max_length=200)),
                ('Security_Comparator', models.CharField(choices=[('<', 'Less Than'), ('>', 'Greater Than'), ('=', 'Equals to'), ('!=', 'Not Equal to'), ('regex', 'Regex')], default='=', max_length=200)),
                ('Security_Expected_Value', models.CharField(default='True', max_length=200)),
            ],
            bases=('squid_engine.rule',),
        ),
        migrations.CreateModel(
            name='Level',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('Name', models.CharField(default='squid game', max_length=200)),
                ('Rules', models.ManyToManyField(to='squid_engine.Rule')),
            ],
        ),
    ]
